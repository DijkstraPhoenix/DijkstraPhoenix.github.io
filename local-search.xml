<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>洛谷[AT_agc006_f]Blackout题解</title>
    <link href="/2023/05/31/%E6%B4%9B%E8%B0%B7-AT-agc006-f-Blackout%E9%A2%98%E8%A7%A3/"/>
    <url>/2023/05/31/%E6%B4%9B%E8%B0%B7-AT-agc006-f-Blackout%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="洛谷-AT-agc006-f-Blackout题解"><a href="#洛谷-AT-agc006-f-Blackout题解" class="headerlink" title="洛谷[AT_agc006_f]Blackout题解"></a>洛谷[AT_agc006_f]Blackout题解</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>难度：本题目前难度为 <code>NOI/NOI+/CTSC</code></p><p><a href="https://www.luogu.com.cn/problem/AT_agc006_f">原题链接</a></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>我们有一个 N 行 N 列的矩阵。第 i 行第 j 列的格子表示为 (i,j)。</p><p>开始时，有 M 个格子是黑色，其他格子都是白色。特别地，开始时格子 (a[1],b[1]),(a[2]​,b[2]​),…,(a[M],b[M]) 是黑色。</p><p>スヌケ君会按照以下的规则尽可能多的将白色格子涂成黑色：</p><pre><code class="hljs">对于整数 1≤x,y,z≤N，如果 (x,y) 和 (y,z) 都是黑色，那么就把 (z,x) 涂黑。</code></pre><p>请计算出当再也没有白色格子能被涂黑时，黑色格子的个数。</p><h3 id="变量范围及条件"><a href="#变量范围及条件" class="headerlink" title="变量范围及条件"></a>变量范围及条件</h3><ul><li><p>1≤N≤105</p></li><li><p>1≤M≤1051≤M≤105</p></li><li><p>1≤ai,bi≤N1≤ai​,bi​≤N</p></li><li><p>各黑格坐标互不相同</p></li></ul><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>从标准输入输入，格式见下：</p><p>第一行包含两个整数 N 和 M；</p><p>从第二行开始的 M 行，每行有两个以空格隔开的整数 a[i] ​和 b[i]​，表示第 i 个黑色格子的坐标。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数到标准输出，表示当尽可能多的把格子涂黑之后，黑色格子的个数。</p><h3 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h3><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入 #1"></a>输入 #1</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">3 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出 #1"></a>输出 #1</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入 #2"></a>输入 #2</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出 #2"></a>输出 #2</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入 #3"></a>输入 #3</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出 #3"></a>输出 #3</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h3 id="样例解释"><a href="#样例解释" class="headerlink" title="样例解释"></a>样例解释</h3><h4 id="1"><a href="#1" class="headerlink" title="#1"></a>#1</h4><p>可以按这样的方法涂黑一个格子：</p><ul><li>因为格子(1,2)(1,2)和(2,3)(2,3)都是黑色而(3,1)(3,1)是白色，把(3,1)(3,1)涂黑。</li></ul><h4 id="2"><a href="#2" class="headerlink" title="#2"></a>#2</h4><p>可以按这样的方法涂黑两个格子：</p><ul><li><p>因为格子(1,1)(1,1)和(1,2)(1,2)都是黑色而(2,1)(2,1)是白色，把(2,1)(2,1)涂黑。</p></li><li><p>因为格子(2,1)(2,1)和(1,2)(1,2)都是黑色而(2,2)(2,2)是白色，把(2,2)(2,2)涂黑。</p></li></ul><h4 id="3"><a href="#3" class="headerlink" title="#3"></a>#3</h4><p>很遗憾，没有任何白色格子能被涂黑。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这道题我们直接进行暴力枚举是不现实的，<del>因为它是黑题。</del> 我们光看存储这个矩阵就能知道，需要 1e5*1e5 的矩阵，也就是 1e10。这样的矩阵用 bool 类型存都是不可行的。再说时间复杂度，纯暴力的时间复杂度可达 O(n^3)，1e5 的数据范围显然是行不通的。</p><p>所以，我们可以把它当做一个三色图来存（分别指 (x,y),(y,z),(z,x) 三个位置）。</p><p>三色图的是一种特殊的有向图，每一个节点都含有一个颜色。而它的染色标准可以理解为：红色的下一个节点是绿色，绿色的下一个节点是蓝色，蓝色的下一个节点又是红色。</p><p>虽然是有向图，但是我们需要知道上一个节点的颜色和下一个节点的颜色，所以，我们可以用带权的无向图来存储，正向的边权值是 1，反向是 -1，这样我们可以直接通过加上通过的边的权值来找到下一个或上一个节点的颜色。</p><p>不过，节点的颜色是循环的，例如蓝色 (2 号色) 的下一个颜色是红色 (0 号色)，而单纯地加上所通过的边的权值 “1” 会变成 3 号色，这是不被允许的，所以，我们还需要一个函数，来修正颜色的值，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">col</span><span class="hljs-params">(<span class="hljs-type">int</span> colour)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(colour&gt;=<span class="hljs-number">3</span>)colour-=<span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">if</span>(colour&lt;<span class="hljs-number">0</span>)colour+=<span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">return</span> colour;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候，我们对于从每个节点 i (1&lt;&#x3D;i&lt;&#x3D;n) 出发的边，需要求出联通块的大小，这一步可以通过 dfs 解决。如果染色失败，那么对答案的贡献为走过的点的个数的平方。如果在联通块中所有颜色都出现过了，对答案的贡献则是<br>( 红色点个数 * 绿色点个数 + 绿色点个数 * 蓝色点个数 + 蓝色点个数 * 红色点个数 )。</p><p>如果以上条件皆不满足，则对答案的贡献是走过的正向边的个数。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-type">int</span> h[<span class="hljs-number">100005</span>],to[<span class="hljs-number">200005</span>],ne[<span class="hljs-number">200005</span>],w[<span class="hljs-number">200005</span>],idx; <span class="hljs-comment">//链式前向星存图</span><br><span class="hljs-type">int</span> color[<span class="hljs-number">200005</span>],colorsum[<span class="hljs-number">5</span>],n1,m1;<br><span class="hljs-type">bool</span> flag,vis[<span class="hljs-number">200005</span>];<br><span class="hljs-type">int</span> sum;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> u,<span class="hljs-type">int</span> v,<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">//新增边</span></span><br><span class="hljs-function"></span>&#123;<br>    to[idx]=v;<br>    w[idx]=x;<br>    ne[idx]=h[u];<br>    h[u]=idx++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">col</span><span class="hljs-params">(<span class="hljs-type">int</span> colour)</span> <span class="hljs-comment">//修正颜色编号函数</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(colour&gt;=<span class="hljs-number">3</span>)colour-=<span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">if</span>(colour&lt;<span class="hljs-number">0</span>)colour+=<span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">return</span> colour;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">colored</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">//DFS求联通块</span></span><br><span class="hljs-function"></span>&#123;<br>    colorsum[color[x]]++;<br>    n1++;<br>    vis[x]=<span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h[x];i!=<span class="hljs-number">-1</span>;i=ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> y=to[i];<br>        <span class="hljs-keyword">if</span>(w[i]==<span class="hljs-number">1</span>)m1++;<br>        <span class="hljs-keyword">if</span>(!vis[y])<br>        &#123;<br>            color[y]=(<span class="hljs-built_in">col</span>(color[x]+w[i]));<br>            <span class="hljs-built_in">colored</span>(y);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(color[y]!=(<span class="hljs-built_in">col</span>(color[x]+w[i])))<br>        &#123;<br>            flag=<span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">memset</span>(h,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(h));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;m);<br>    <br>    <span class="hljs-keyword">while</span>(m--)<br>    &#123;<br>        <span class="hljs-type">int</span> u,v;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>,&amp;u,&amp;v);<br>        <span class="hljs-built_in">AddEdge</span>(u,v,<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">AddEdge</span>(v,u,<span class="hljs-number">-1</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) <span class="hljs-comment">//对于每个点，从这个点出发的联通块和贡献计算</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(vis[i])<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">memset</span>(colorsum,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(colorsum));<br>        n1=<span class="hljs-number">0</span>;<br>        m1=<span class="hljs-number">0</span>;<br>        flag=<span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">colored</span>(i);<br>        <span class="hljs-keyword">if</span>(flag)sum+=n1*n1;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(colorsum[<span class="hljs-number">0</span>]&amp;&amp;colorsum[<span class="hljs-number">1</span>]&amp;&amp;colorsum[<span class="hljs-number">2</span>])<br>        &#123;<br>            sum+=(colorsum[<span class="hljs-number">0</span>]*colorsum[<span class="hljs-number">1</span>]+colorsum[<span class="hljs-number">1</span>]*colorsum[<span class="hljs-number">2</span>]+colorsum[<span class="hljs-number">2</span>]*colorsum[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> sum+=m1;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,sum); <span class="hljs-comment">//输出答案</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>于是，本题至此 AC。</p><hr>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>信息学</tag>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息学奥赛算法大全</title>
    <link href="/2023/04/22/%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%A5%A5%E8%B5%9B%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8/"/>
    <url>/2023/04/22/%E4%BF%A1%E6%81%AF%E5%AD%A6%E5%A5%A5%E8%B5%9B%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="信息学奥赛算法大全"><a href="#信息学奥赛算法大全" class="headerlink" title="信息学奥赛算法大全"></a>信息学奥赛算法大全</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p style="text-indent:2em">这是一篇博客，也可以说是一本书。这篇博客将带着读者们遨游 OI 的世界。在这里，你可以看到从基本的顺序结构到困难的 A* 算法。我们的学习过程中，需要使用到 <a href="https://noi.openjudge.cn">Openjudge</a> 和 <a href="https://luogu.com.cn">洛谷</a> 、 <a href="https://acwing.com">Acwing</a> 几种 OJ，请各位读者提前注册好账号。通往 OI 的传送门现在开启！</p><p style="text-indent:19em">——DijkstraPhoenix，2023/4/27</p><h2 id="一、语法初期"><a href="#一、语法初期" class="headerlink" title="一、语法初期"></a>一、语法初期</h2><p style="text-indent:2em">学信奥是必须要学会语法的，语法是将思维变成实现的一种介质，没有语法，任何思维都无法变为现实。</p><h3 id="1-1-环境搭建"><a href="#1-1-环境搭建" class="headerlink" title="1.1 环境搭建"></a>1.1 环境搭建</h3><h4 id="Windows-环境"><a href="#Windows-环境" class="headerlink" title="Windows 环境"></a>Windows 环境</h4><p>在 Windows 环境下，我们使用 Dev-C++ 作为编译器(也就是 IDE)，安装方式如下：</p><p>打开这个网址，下载安装包: <a href="https://sourceforge.net/projects/orwelldevcpp/">https://sourceforge.net/projects/orwelldevcpp/</a></p><p><img src="https://i.328888.xyz/2023/04/27/i9eKF5.png" alt="下载页面"></p><p>运行刚刚下载的安装包，进行下载（一开始的语言选择就选 English 就行了）。安装完后启动 Dev-C++，这里再选择语言为简体中文。字体、颜色、图标自己选，尽量选可以看得清的。</p><p>然后就是这个样子：</p><p><img src="https://i.328888.xyz/2023/04/27/i9z4wc.png" alt="Dev-C++"></p><h4 id="Linux-环境"><a href="#Linux-环境" class="headerlink" title="Linux 环境"></a>Linux 环境</h4><p>我们在 Linux 环境下，没有 Dev-C++，所以，我们选择另一种不错的 IDE —— Code::Blocks。</p><p>如果不习惯 Code::Blocks 的话，可以使用 Geany （自行安装）。</p><p>在这里，我们仅展示 Debian 内核的 Linux 安装 Code::Blocks 的步骤，其它 Linux 版本请自行查询安装教程。</p><blockquote><p>Tips: Debian 内核的 Linux 有 Kali、Ubuntu、Deepin、Noi linux 等。</p></blockquote><p>我们打开终端，输入以下命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install codeblocks <br></code></pre></td></tr></table></figure><p>此时，我们需要输入当前用户的密码，才能进行安装（如果用的是超级用户的终端，可以不输入 <code>sudo</code>）。</p><p>等待安装完成，我们就可以通过菜单或者在终端里输入 <code>codeblocks</code> 就能启动了。如果无法启动，则可以在终端里输入 <code>sudo codeblocks</code> 或者重装该软件。</p><h3 id="1-2-Hello-World！"><a href="#1-2-Hello-World！" class="headerlink" title="1.2 Hello, World！"></a>1.2 Hello, World！</h3><p><strong>注：以后我们的代码里会有很多注释，程序不会执行它,如：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//这是一行注释，它不会被执行</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是一个多行注释，不会被执行</span><br><span class="hljs-comment">这一行也不会被执行</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>任何一本学习编程的书，基本上第一课就是输出 <code>Hello, World!</code>。</p><p>本题请见 <a href="http://noi.openjudge.cn/ch0101/01/">Openjudge 1.1.01 - Hello, World!</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>输出一行字符串 “Hello, World!”</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">无<br></code></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">Hello,</span> World!<br></code></pre></td></tr></table></figure><hr><p>这道题我们可以画一个简单的流程图：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">程序开始 -&gt; 输出 <span class="hljs-string">&quot;Hello, World!&quot;</span> -&gt; 结束程序<br></code></pre></td></tr></table></figure><p>在 C++ 中，任何一个程序都是从主函数执行的，我们只需要将代码写在主函数里就行了。</p><p>主函数的定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> <span class="hljs-comment">//int 表示主函数的返回值是 int(整数) 类型的（必须是 int），main 是主函数的名称（也必须是 main），void 表示它不传任何参数，可以省略</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//要执行的代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>当然，主函数还有其它的定义方式，比如以下几种(此处没有列举完)：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc)</span></span>&#123;&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[])</span></span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>不过我们学习信奥不需要这些参数，有兴趣的读者可以自行查阅资料。</p><p>因为我们需要输出一些东西，而流输出函数 <code>cout</code> 定义在 <code>iostream</code> 头文件里，所以我们需要导入它。</p><p>cout 是流输出函数，它不需要加括号，只需要加上流输出符号，如:<br><code>cout&lt;&lt;1&lt;&lt;2;</code></p><p>完整代码（注释打不打也没有关系，这里做详细的讲解）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-comment">//导入流输入输出所在的头文件</span><br><span class="hljs-comment">//我们还可以使用万能头（并不是万能的），定义如下：</span><br><span class="hljs-comment">//#include&lt;bits/stdc+++.h&gt;</span><br><span class="hljs-comment">//在一些编译器中，并不支持万能头（只是少数）</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-comment">//为防止程序员定义和 iostream 里重名的函数，所以声明了一个 std 命名空间</span><br><span class="hljs-comment">//using 表示使用，namespace 表示命名空间，std 是命名空间的名称</span><br><span class="hljs-comment">//这个语句表示使用 std 命名空间。如果不加上这一句，那么用 std 里的东西就需要有单独的声明：比如用 cout 需要写成 std::cout</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//主函数</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Hello, World!&quot;</span>&lt;&lt;endl;<span class="hljs-comment">//C++ 里的语句需要加上分号（英文半角的）</span><br>    <span class="hljs-comment">//字符串需要打上双引号，endl 表示换行</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//程序结束了，返回0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们在 C++ 中，基本上是兼容 C 语言的代码的，所以，这个代码还可以这么写：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span> </span><br><span class="hljs-comment">//C语言的输出函数定义在 stdio.h 里</span><br><span class="hljs-comment">//C语言没有 std 命名空间，不需要声明</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World!\n&quot;</span>);<span class="hljs-comment">//printf 是格式化输出函数，要加括号</span><br>    <span class="hljs-comment">// \n 是换行符，相当于 C++ 里的 endl</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们把这个程序保存为 <code>Helloworld.cpp</code>（名字可以自己改，后缀名不要改），运行一下就成功啦！</p><p>如果我们用 C语言 写的话，还可以把后缀名改为 <code>.c</code>。</p><h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p>我们在编程中，不可避免的需要大量变量，本章我们来讲讲变量。</p><p>变量是一种可以储存值的容器，可取值也可写入。</p><p>常见的变量有以下几种：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">short</span> a;<span class="hljs-comment">//短整型变量</span><br><span class="hljs-type">int</span> b;<span class="hljs-comment">//整型变量</span><br><span class="hljs-type">long</span> c;<span class="hljs-comment">//长整型变量（ps：在几乎所有的电脑上，它和int没有区别）</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> d;<span class="hljs-comment">//超长整型变量</span><br><span class="hljs-type">float</span> e;<span class="hljs-comment">//单精度浮点型变量（就是小数）</span><br><span class="hljs-type">double</span> f;<span class="hljs-comment">//双精度浮点型变量</span><br><span class="hljs-type">long</span> <span class="hljs-type">double</span> g;<span class="hljs-comment">//超长浮点型变量</span><br><span class="hljs-type">char</span> h;<span class="hljs-comment">//字符变量（只能存一个字符）</span><br>string i;<span class="hljs-comment">//字符串</span><br><span class="hljs-type">bool</span> j;<span class="hljs-comment">//布尔类型变量（取值只有“真”和“假”）</span><br>......<br></code></pre></td></tr></table></figure><p>而一些变量名称前面还可以加上修饰符：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> ca=<span class="hljs-number">10000</span>;<span class="hljs-comment">//整型常量（不能修改值，必须在定义是赋值）</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> ui;<span class="hljs-comment">//无符号整型（只能是正数）</span><br><span class="hljs-type">signed</span> <span class="hljs-type">int</span> si;<span class="hljs-comment">//带符号整型（可以是正数或负数）</span><br>......<br></code></pre></td></tr></table></figure><p>不过变量也有取值范围，这里写出几种：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span>: (<span class="hljs-number">-2</span>^<span class="hljs-number">31</span><span class="hljs-number">-1</span>)~(<span class="hljs-number">2</span>^<span class="hljs-number">31</span><span class="hljs-number">-1</span>)<br><span class="hljs-type">long</span> <span class="hljs-type">long</span>:(<span class="hljs-number">-2</span>^<span class="hljs-number">63</span><span class="hljs-number">-1</span>)~(<span class="hljs-number">2</span>^<span class="hljs-number">63</span><span class="hljs-number">-1</span>)<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>: (<span class="hljs-number">0</span>)~(<span class="hljs-number">2</span>^<span class="hljs-number">64</span><span class="hljs-number">-1</span>)<br><span class="hljs-type">bool</span>: <span class="hljs-literal">true</span>或<span class="hljs-literal">false</span><br>......<br></code></pre></td></tr></table></figure><p>超过变量的取值范围，变量将会顶破符号位（在位运算中会详细讲解），变成一个极小的负数。</p><p>在我们编程中，要选择合适的变量类型和名称，否则会造成不必要的错误。</p><p>变量的命名规则有以下几点：1.只能由大小写英文字母、数字和下划线组成（可以使用下划线或者大小写来表示空格）。2.不能以数字开头。3.要避免已经定义过的变量，不管是什么类型的，而且不能定义 C++ 自带的标识符（例如 cin、cout、printf 等）。</p><p>变量也可以互相运算，在 C++ 里，运算符分别是这样的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++">a+b<span class="hljs-comment">//加法</span><br>a-b<span class="hljs-comment">//减法</span><br>a*b<span class="hljs-comment">//乘法</span><br>a/b<span class="hljs-comment">//除法</span><br>a%b<span class="hljs-comment">//取余运算（模运算）</span><br>a==b<span class="hljs-comment">//注意：C++表示两个两相等使用两个等号</span><br>a!=b<span class="hljs-comment">//a不等于b</span><br>a&lt;b<span class="hljs-comment">//a小于b</span><br>a&gt;b<span class="hljs-comment">//a大于b</span><br>a&lt;=b<span class="hljs-comment">//a小于等于b</span><br>a&gt;=b<span class="hljs-comment">//a大于等于b</span><br></code></pre></td></tr></table></figure><p>而变量的变化方式也有几种：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">a=b<span class="hljs-comment">//直接把b的值赋给a</span><br>a+=b<span class="hljs-comment">//把a的值加上b</span><br>a-=b<span class="hljs-comment">//把a的值减少b</span><br>a*=b<span class="hljs-comment">//把a的值乘上b</span><br>a/=b<span class="hljs-comment">//把a的值除以b</span><br>a++<span class="hljs-comment">//相当于a=a+1;</span><br>a--<span class="hljs-comment">//相当于a=a-1;</span><br></code></pre></td></tr></table></figure><hr><h3 id="1-4-顺序结构"><a href="#1-4-顺序结构" class="headerlink" title="1.4 顺序结构"></a>1.4 顺序结构</h3><h4 id="A-B-Problem"><a href="#A-B-Problem" class="headerlink" title="A+B Problem"></a>A+B Problem</h4><p><a href="https://www.luogu.com.cn/problem/P1001">洛谷 P1001 A+B Problem</a></p><h5 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h5><p>输入两个整数 a,b ，输出它们的和 ( |a|,|b| &lt;&#x3D; 1e9 )。</p><h5 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">20 </span><span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h5 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">50<br></code></pre></td></tr></table></figure><p>对于这道题，我们需要定义两个变量，来保存 a 和 b 的值，输入这两个变量，在输出它们的和就行了。</p><p>所以，我们可以写出这样的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a,b;<span class="hljs-comment">//定义两个变量a、b</span><br>    cin&gt;&gt;a&gt;&gt;b;<span class="hljs-comment">//输入a和b(此处使用了流输出，和cout一样，也在iostream头文件和std命名空间里，不过要区分流输入符号和流输出符号)</span><br>    cout&lt;&lt;a+b;<span class="hljs-comment">//输出和</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="输出第2个整数"><a href="#输出第2个整数" class="headerlink" title="输出第2个整数"></a>输出第2个整数</h4><p><a href="https://www.luogu.com.cn/problem/B2003">洛谷 B2003</a></p><h5 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h5><p>输入三个整数，整数之间由一个空格分隔。把第二个输入的整数输出。</p><h5 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">123 </span><span class="hljs-number">456</span> <span class="hljs-number">789</span><br></code></pre></td></tr></table></figure><h5 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">456<br></code></pre></td></tr></table></figure><p>本题我们需要定义三个变量，分别输入后再输出第二个变量的值，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a,b,c;<br>    cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;<br>    cout&lt;&lt;b;<span class="hljs-comment">//第二个变量</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h4><p>1.<a href="https://www.luogu.com.cn/problem/B2008">计算 (a+b)×c 的值 (洛谷B2008)</a></p><p>2.<a href="https://www.luogu.com.cn/problem/B2021">输出保留 3 位小数的浮点数(洛谷B2021)</a></p><p>提示：保留3位小数可以用 <code>printf(&quot;%.3f&quot;,float类型变量);</code>，double类型需要是 <code>%.3lf</code></p><p>3.<a href="https://www.luogu.com.cn/problem/B2010">带余除法 (洛谷B2010)</a></p><hr><h3 id="1-5-分支结构"><a href="#1-5-分支结构" class="headerlink" title="1.5 分支结构"></a>1.5 分支结构</h3><h4 id="奇偶数判断"><a href="#奇偶数判断" class="headerlink" title="奇偶数判断"></a>奇偶数判断</h4><p><a href="http://noi.openjudge.cn/ch0104/03/">openjudge 1.4-3</a></p><h5 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定一个整数 n，判断该数是奇数还是偶数。如果 n 是奇数，输出 <code>odd</code>；如果 n 是偶数，输出 <code>even</code>。</p><h5 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><h5 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h5><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">odd</span><br></code></pre></td></tr></table></figure><p>这道题我们需要进行一个判断：如果(n是奇数) 输出”odd”；否则 输出”even”。</p><p>而 C++ 里的判断语句，我们可以使用 “if……else if……else” 语句，if 后面的括号里是填判断的依据。</p><p>所以，代码可以这么写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)<span class="hljs-comment">//除2的余数是1</span><br>    &#123;<br>        <span class="hljs-comment">//奇数</span><br>        cout&lt;&lt;<span class="hljs-string">&quot;odd&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-comment">//否则是偶数</span><br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;even&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="输出绝对值"><a href="#输出绝对值" class="headerlink" title="输出绝对值"></a>输出绝对值</h4><p><a href="http://noi.openjudge.cn/ch0104/02/">openjudge 1.4-2</a></p><h5 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h5><p>输入一个浮点数，输出这个浮点数的绝对值。</p><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>输入一个浮点数，其绝对值不超过10000。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>输出这个浮点数的绝对值，保留到小数点后两位。</p><h5 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-3.14</span><br></code></pre></td></tr></table></figure><h5 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">3</span>.<span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><p>这道题存在一个使用库函数 <code>fabs()</code> 的做法，在这里不做讲解，有兴趣的读者自行查阅。</p><p>绝对值是指一个数到 0 的距离，例如 | 123 | &#x3D; 123, | -456 | &#x3D; 456。</p><p>不难看出，正数和 0 的绝对值就是它本身，而负数的绝对值就是对它取反。</p><p>所以，本题可以分类列举大于等于 0 和小于 0 两种情况。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">float</span> x;<span class="hljs-comment">//浮点数，需要 float 类型</span><br>    cin&gt;&gt;x;<br>    <span class="hljs-comment">//对于这种问题，我们可以使用三目运算符，相当于一个微型的if-else语句</span><br>    cout&lt;&lt;(x&gt;=<span class="hljs-number">0</span>?<span class="hljs-comment">/*正数*/</span>x<span class="hljs-comment">/*否则*/</span>:<span class="hljs-comment">/*负数*/</span>-x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中的三目运算符 <code>cout&lt;&lt;(x&gt;=0?x:-x);</code> 和这段代码等同：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span>(x&gt;=<span class="hljs-number">0</span>)<br>&#123;<br>    cout&lt;&lt;x;<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br>    cout&lt;&lt;-x;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><p>常见的逻辑运算有与、或、非三种。</p><p>与的两边同时成立，则表达式成立；或的两边只要有一个是成立的，则表达式成立；非的后面是成立的，则表达式不成立，否则成立。</p><p>它们分别写作 <code>&amp;&amp;</code> 、 <code>||</code> 、 <code>!</code>，写在 if 语句里就会变成这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>+<span class="hljs-number">1</span>==<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">3</span>*<span class="hljs-number">3</span>==<span class="hljs-number">9</span>)<br><span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>+<span class="hljs-number">1</span>==<span class="hljs-number">2</span> || <span class="hljs-number">3</span>*<span class="hljs-number">3</span>==<span class="hljs-number">10</span>)<br><span class="hljs-keyword">if</span>(!(<span class="hljs-number">1</span>+<span class="hljs-number">1</span>==<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure><hr><h4 id="课后习题-1"><a href="#课后习题-1" class="headerlink" title="课后习题"></a>课后习题</h4><p>1.<a href="https://www.luogu.com.cn/problem/B2035">判断正负 (洛谷 B2035)</a></p><p>2.<a href="https://www.luogu.com.cn/problem/B2040">判断是否为两位数 (洛谷 B2040)</a></p><p>3.<a href="https://www.luogu.com.cn/problem/B2043">判断能否被 3，5，7 整除 (洛谷 B2043)</a></p><p>Tips：此题需要使用到逻辑运算。</p><hr><h3 id="1-6-循环结构"><a href="#1-6-循环结构" class="headerlink" title="1.6 循环结构"></a>1.6 循环结构</h3><p>我们在编程中，总会需要循环，虽然一些可以不停地写同一行代码，但遇到无限循环或者不定次数循环就无能为力了。</p><p>常见的循环有三种：<code>while</code> 循环、<code>do···while</code> 循环和 <code>for</code> 循环。</p><p>首先说说 while 循环。</p><p>while 循环是一种条件循环，每次循环检测一次循环条件，成立的话就循环一次，然后再检查。</p><p>例如这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">10</span>)<br>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Hello&quot;</span>&lt;&lt;endl;<br>    i++;<br>&#125;<br></code></pre></td></tr></table></figure><p>而 do…while 循环则是先循环一次，再判断条件是否成立。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Hello&quot;</span>&lt;&lt;endl;<br>    i++;<br>&#125;<span class="hljs-keyword">while</span>(i&lt;=<span class="hljs-number">10</span>);<span class="hljs-comment">//别忘了加分号</span><br></code></pre></td></tr></table></figure><p>for 循环是一种很常用的循环，它的功能很多，甚至在 C++14 及以后的版本里可以直接遍历一个不定量数组。</p><p>它的模板是 <code>for(定义（也可以直接使用已定义的）循环变量=初始值;循环条件;变化规则)</code>，当然三个语句不一定都要写，但是分号不能省。如前两个样例也可以写成这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++)<br>&#123;<br>    cout&lt;&lt;<span class="hljs-string">&quot;Hello&quot;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="输出-n-次-“Hello-World-”"><a href="#输出-n-次-“Hello-World-”" class="headerlink" title="输出 n 次 “Hello, World!”"></a>输出 n 次 “Hello, World!”</h4><p>本题是自编题。</p><h5 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定一个 n ，输出 n 行 <code>Hello, World!</code>。</p><h5 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入"></a>样例输入</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><h5 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出"></a>样例输出</h5><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">Hello,</span> World!<br><span class="hljs-built_in">Hello,</span> World!<br><span class="hljs-built_in">Hello,</span> World!<br><span class="hljs-built_in">Hello,</span> World!<br><span class="hljs-built_in">Hello,</span> World!<br></code></pre></td></tr></table></figure><p>这道题是在 Hello, World! 的基础上加上了循环。根据它需要循环 n 次，不难想出这道题需要使用 for 循环。</p><p>所以代码可以这么写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)<br>        cout&lt;&lt;<span class="hljs-string">&quot;Hello, World!&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="课后习题-2"><a href="#课后习题-2" class="headerlink" title="课后习题"></a>课后习题</h4><h5 id="N-个-A-B"><a href="#N-个-A-B" class="headerlink" title="N 个 A+B"></a>N 个 A+B</h5><p>本题是自编题。</p><h5 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h5><p>给定 N，接下来的 N 行每行两个整数 A、B，求 A+B，输出共 N 行。</p><h5 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">5</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">23 </span><span class="hljs-number">54</span><br><span class="hljs-symbol">123 </span><span class="hljs-number">97</span><br><span class="hljs-symbol">56 </span><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h5 id="输出样例-4"><a href="#输出样例-4" class="headerlink" title="输出样例"></a>输出样例</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">3<br>12<br>77<br>220<br>68<br></code></pre></td></tr></table></figure><hr><h3 id="1-7-一维数组"><a href="#1-7-一维数组" class="headerlink" title="1.7 一维数组"></a>1.7 一维数组</h3><p>如果我们需要输入 10 个整数，并且输出它们的和，只用变量的话，我们就需要像 <code>int a,b,c,d,e,f,g,h,i,j;</code> 这样定义 10 个变量，非常麻烦。那么，如果可以把它们合并成一个长条，就方便多了。于是，C++ 里引进了数组的思想。</p><p>我们可以把数组看成这样的一个长条：</p><p><img src="https://i.imgloc.com/2023/05/23/VAFTc5.png" alt="数组.png"></p><p>我们在定义数组时，只需要在变量的基础上，在后面加速中括号并填上数组大小即可。如：定义一个长度为 10 的整型数组 A，就可以写作 <code>int A[10];</code> ，如需访问一个值，就在中括号里写上下标位置即可。如输出 A 的第 6 个值，可以写作 <code>cout&lt;&lt;A[5]</code>。<strong>它的下标是0~9。</strong></p><h4 id="查找特定的值"><a href="#查找特定的值" class="headerlink" title="查找特定的值"></a>查找特定的值</h4><p><a href="https://www.luogu.com.cn/problem/B2093">洛谷 B2093</a></p><p>这道题我们可以使用顺序查找的方式，先看看数组的第0位（下标从零计）是不是目标值，如果是，输出下标。否则查找下一位。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10005</span>];<span class="hljs-comment">//稍微开大一点</span><br><span class="hljs-comment">//数组尽量定义成全局变量（不要定义在函数里）</span><br><span class="hljs-type">int</span> n,x;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<span class="hljs-comment">//从0~n-1循环读入</span><br>        cin&gt;&gt;a[i];<br>    cin&gt;&gt;x;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i]==x)<span class="hljs-comment">//找到了</span><br>        &#123;<br>            cout&lt;&lt;i;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//因为只需要找到第一个，所以找到后直接结束程序</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//遍历完数组后还是没有找到</span><br>    cout&lt;&lt;<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样类型的题如果 n 太大的话（例如1 &lt;&#x3D; n &lt;&#x3D; 10^9），顺序查找就无法在指定时间内完成了（时间复杂度 O(n) ），对于一个有序的数组（单调递不增或单调不降），我们可以使用二分查找的方式解决，在后面会详细讲解。</p><h4 id="课后习题-3"><a href="#课后习题-3" class="headerlink" title="课后习题"></a>课后习题</h4><p>1.<a href="https://www.luogu.com.cn/problem/B2089">洛谷 B2089 数组逆序重存放</a></p><p>提示：此题可以使用两个循环变量实现，例如 <code>for(int i=1,j=n;i&lt;=n;i++,j--)</code></p><p>2.<a href="https://www.luogu.com.cn/problem/B2104">洛谷 B2104 矩阵加法</a></p><p>提示：此题需要循环嵌套（在一个循环里写循环）</p><hr><h2 id="二、基础算法"><a href="#二、基础算法" class="headerlink" title="二、基础算法"></a>二、基础算法</h2><h3 id="1-1-模拟算法"><a href="#1-1-模拟算法" class="headerlink" title="1.1 模拟算法"></a>1.1 模拟算法</h3><p>模拟是一种最基础的算法，它的策略是按照题目的要求，一步一步的进行模拟各个值的变化，从而获取答案。</p><h4 id="Peter-的烟"><a href="#Peter-的烟" class="headerlink" title="Peter 的烟"></a>Peter 的烟</h4><p><a href="https://www.luogu.com.cn/problem/P1150">洛谷 P1150</a></p><h5 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h5><p>Peter 有 n 根烟，他每吸完一根烟就把烟蒂保存起来，k(k &gt; 1)个烟蒂可以换一个新的烟，那么 Peter 最终能吸到多少根烟呢？</p><p>与某些脑筋急转弯不同的是，Peter 并不能从异次元借到烟蒂，抽完后再还回去。</p><h5 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h5><p>每组测试数据一行包括两个整数 n,k (1 &lt; n,k &lt;&#x3D; 1e8)。</p><h5 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h5><p>对于每组测试数据，输出一行包括一个整数表示最终烟的根数。</p><h5 id="输入样例-5"><a href="#输入样例-5" class="headerlink" title="输入样例"></a>输入样例</h5><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h5 id="输出样例-5"><a href="#输出样例-5" class="headerlink" title="输出样例"></a>输出样例</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><p>本题我们可以先吸一根烟，随后再检查一下能不能用烟蒂换一些烟，如果可以，就把烟蒂数清零，并且把烟的数量加 1，然后再抽一根烟……以此类推。</p><p>此处我们就需要刚才讲的循环了。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,k;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<span class="hljs-comment">//抽了的数量</span><br>    <span class="hljs-type">int</span> m=<span class="hljs-number">0</span>;<span class="hljs-comment">//当前烟蒂数</span><br>    <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-comment">//抽烟</span><br>        n--;<br>        num++;<br>        m++;<br>        <span class="hljs-comment">//判断是否能换</span><br>        <span class="hljs-keyword">if</span>(m==k)<br>        &#123;<br>            n++;<br>            m=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;num;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>信息学</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0开始制作Minecraft模组</title>
    <link href="/2023/03/18/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%88%B6%E4%BD%9CMinecraft%E6%A8%A1%E7%BB%84/"/>
    <url>/2023/03/18/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%88%B6%E4%BD%9CMinecraft%E6%A8%A1%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="从0开始制作Minecraft模组"><a href="#从0开始制作Minecraft模组" class="headerlink" title="从0开始制作Minecraft模组"></a>从0开始制作Minecraft模组</h1><p>我们在玩我的世界时，总会发现很多好玩的模组，肯定会有很多人有这样的疑惑：模组是怎么制作的呢？</p><p>于是，经过我漫长的寻找，终于找道了做法。(不是转载的)</p><p><strong>注意！这个方法仅适用于 Java 版</strong></p><hr><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>众所周知，<strong>Java</strong> 版的模组要用 <strong>Java</strong> 制作。(这不废话吗)</p><p>所以，我们第一个要安装的东西是 <strong>Java</strong>。</p><p>还有就是我们制作模组的软件 <strong>MCreator</strong>。</p><blockquote><p><em><strong>2023&#x2F;3&#x2F;18更新</strong></em></p></blockquote><h3 id="Java下载安装"><a href="#Java下载安装" class="headerlink" title="Java下载安装"></a><strong>Java</strong>下载安装</h3><p><strong>以下几种方法选一种就可以了。</strong></p><h4 id="1-甲骨文原版-Java"><a href="#1-甲骨文原版-Java" class="headerlink" title="1.甲骨文原版 Java"></a>1.甲骨文原版 <strong>Java</strong></h4><p>打开这个 <a href="https://www.java.com/zh-CN/download/">JRE8链接</a> 和 <a href="https://www.oracle.com/java/technologies/downloads/#jdk17-windows">JDK17链接</a> 下载，进行安装。</p><p><strong>JRE8</strong> 直接点下载，<strong>JDK17</strong> 选择适合的版本就可以了。<br>(<strong>PS：仅适用于 64 为位用户</strong>)</p><p><strong>然后分别打开安装程序，进行安装，不要改安装设置。</strong></p><blockquote><p>速度不稳定，有时候有亿点慢</p></blockquote><h4 id="2-Microsoft-OpenJDK"><a href="#2-Microsoft-OpenJDK" class="headerlink" title="2.Microsoft OpenJDK"></a>2.Microsoft <strong>OpenJDK</strong></h4><p>点击这个 <a href="https://learn.microsoft.com/zh-cn/java/openjdk/download">链接</a>，选择适合的版本(<strong>要安装 17 和 11</strong>)，或者直接 <a href="https://aka.ms/download-jdk/microsoft-jdk-17.0.6-windows-x64.msi">下载17</a> 和 <a href="https://aka.ms/download-jdk/microsoft-jdk-11.0.18-windows-x64.msi">下载11</a> x64 版本(64位)</p><p><strong>然后分别打开安装程序，进行安装，不要改安装设置。</strong></p><blockquote><p>下载速度不错，峰值约 10MB&#x2F;S</p></blockquote><h4 id="3-Bellsoft-LibericaJDK"><a href="#3-Bellsoft-LibericaJDK" class="headerlink" title="3.Bellsoft LibericaJDK"></a>3.Bellsoft <strong>LibericaJDK</strong></h4><p>由于种类繁多，这里推荐这个 <a href="https://download.bell-sw.com/java/19.0.2+9/bellsoft-jdk19.0.2+9-windows-amd64-full.msi">下载地址</a>，或者 <a href="https://bell-sw.com/pages/downloads/">自己选择版本</a> (建议 19 和 9，也有 19.0.2+9 的整合包)</p><p><strong>然后分别打开安装程序，进行安装，不要改安装设置。</strong></p><blockquote><p>选择超多，速度也能达到 10MB&#x2F;S ，强烈推荐</p></blockquote><h4 id="4-Eclipse-JDK"><a href="#4-Eclipse-JDK" class="headerlink" title="4.Eclipse JDK"></a>4.Eclipse <strong>JDK</strong></h4><p>这个 JDK 有 32 位版本的(x86)，由于种类繁多，所以自己选择，<a href="https://adoptium.net/zh-CN/temurin/releases/">点击这里</a>，一样选择 JRE8 和 JDK17。</p><blockquote><p>不仅选择多，而且有各种硬件架构，32 位用户可以在这里下载，不过速度很惊人 (100KB&#x2F;S) …</p></blockquote><h4 id="检测安装"><a href="#检测安装" class="headerlink" title="检测安装"></a>检测安装</h4><p>我们打开 <code>Win + R</code> 组合键，调出运行框，输入 CMD ，此时会弹出一个命令行程序。</p><p>在 CMD 里面输入 <code>java</code> ，如果是这个情况则说明安装成功。</p><p><img src="https://i.328888.xyz/2023/03/19/MgS8N.png"></p><p>否则就重新安装吧…</p><hr><h3 id="MCreator-下载安装"><a href="#MCreator-下载安装" class="headerlink" title="MCreator 下载安装"></a><strong>MCreator</strong> 下载安装</h3><p>随后就是我们的重点：<strong>MCreator</strong>。</p><p>首先点击这个 <a href="https://mcreator.net/download">链接</a> ，选择最新版下载。</p><p><strong>安装过程中要创建快捷方式</strong></p><p>如果安装成功，打开后会是这个样子：</p><p><img src="https://i.328888.xyz/2023/03/19/MgQ8L.png"></p><hr><blockquote><p><em><strong>2023&#x2F;3&#x2F;19更新</strong></em></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>我的世界Minecraft</tag>
      
      <tag>模组</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>教程-制作自己的安装程序</title>
    <link href="/2023/03/01/%E6%95%99%E7%A8%8B-%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F/"/>
    <url>/2023/03/01/%E6%95%99%E7%A8%8B-%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="教程-制作自己的安装程序"><a href="#教程-制作自己的安装程序" class="headerlink" title="教程-制作自己的安装程序"></a>教程-制作自己的安装程序</h1><h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 - 简介"></a>0x00 - 简介</h2><p>很多软件都有自己的安装程序，但是，我们自己写的软件难道就不能有安装程序吗？这篇文章将带着你制作自己的安装程序。</p><p>而制作安装程序的方法有两种：</p><h2 id="0x01-使用-SIM"><a href="#0x01-使用-SIM" class="headerlink" title="0x01 - 使用 SIM"></a>0x01 - 使用 SIM</h2><h3 id="0x01-01-软件"><a href="#0x01-01-软件" class="headerlink" title="0x01.01 - 软件"></a>0x01.01 - 软件</h3><p>其实，大部分安装程序都是通过一个叫 Smart Install Maker 的软件制作的，所以，我们需要下载它。</p><p>打开这个网址：<br><a href="http://www.sminstall.com/">http://www.sminstall.com/</a> ，点击 <code>Download the FREE trial version (1.52 Mb)</code> 标签，进行下载。然后运行 <code>SimSetup.exe</code> ，根据提示自行安装。</p><h3 id="0x01-02-使用方法"><a href="#0x01-02-使用方法" class="headerlink" title="0x01.02 - 使用方法"></a>0x01.02 - 使用方法</h3><p>打开 SIM ，填写产品名称(你的软件的名称)、版本、公司名称、支持链接(可以填邮箱，或者 Git 地址等)，另存为指安装程序保存的路径，默认是在 <code>库\文档</code> 里，这一页其它的内容可以不用改。</p><p>然后点击“文件”标签，把你的程序拖到里面去，“卸载”建议勾上，否则卸载程序几乎没有用（指卸载程序是否删除某个文件）。</p><p>如果需要有注册表或系统要求的就自行去填。</p><p>最后一点，切换到“快捷方式”标签，点右下角的加号可以添加快捷方式，默认在桌面上，也可以改成菜单栏或快速启动栏，记得准备好图标文件。</p><p>按下 Ctrl + F9 ，编译安装程序，就做完了。</p><p>~完结撒花ヾ(๑╹◡╹)ﾉ”~</p><hr><h2 id="0x02-自己写安装程序"><a href="#0x02-自己写安装程序" class="headerlink" title="0x02 - 自己写安装程序"></a>0x02 - 自己写安装程序</h2><h3 id="0x02-01-原理"><a href="#0x02-01-原理" class="headerlink" title="0x02.01 - 原理"></a>0x02.01 - 原理</h3><p>如果认为 SIM 的自定义化还不够，那么就可以自己写一段代码了。</p><p>这种方式其实有点麻烦，我们需要把安装的文件压缩成一个 iso 镜像，安装时再解压。</p><h3 id="0x02-02-实现"><a href="#0x02-02-实现" class="headerlink" title="0x02.02 - 实现"></a>0x02.02 - 实现</h3><p>首先我们需要下载 7-zip ，我已经在网盘上把需要的文件分享了，点击<a href="https://pan.baidu.com/s/1q7y0TGcfQf7XKK4tAVgxTA?pwd=DJPH">链接</a>下载，提取码DJPH (仅备用)。</p><p>我们创建一个新的文件夹，自行命名，最好是你的程序名称。将下载好的 <code>7z.exe</code> 放在里面。</p><p>然后用 <a href="http://www.bandisoft.com/">Bandzip</a> 把你需要安装的文件 <strong>连文件夹</strong> 打包成 iso ，命名为 <code>Data.iso</code> (不要改)，放在文件夹里。</p><p>如果需要的话，可以制作一个 <code>uninstall.exe</code> 放在压缩包里，这里提供一个 C++ 模板:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;确认卸载？如果不想卸载，请使用右上角红叉关闭程序&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;del **/你的压缩包里的根文件夹名称/**&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;卸载完成&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后制作安装程序，命名为 <code>Setup.exe</code> (可以改)，放在你的文件夹里，C++ 模板:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;欢迎使用某某软件安装程序&quot;</span>);<span class="hljs-comment">//名称自己改</span><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入安装路径&quot;</span>)<br>    <span class="hljs-type">char</span> *s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-type">char</span> *t=<span class="hljs-string">&quot;7z.exe x Data.iso -o \&quot;&quot;</span>;<br>    <span class="hljs-built_in">strcat</span>(t,s);<br>    <span class="hljs-built_in">strcat</span>(t,<span class="hljs-string">&quot;\&quot;&quot;</span>);<br>    <span class="hljs-built_in">system</span>(t);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;安装成功！&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>随后将这个文件夹压缩成一个 rar 文件，安装时执行里面的 <code>Setup.exe</code> 就好啦。</p><p>~完结撒花ヾ(๑╹◡╹)ﾉ”~</p><hr><h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 - 小结"></a>0x03 - 小结</h2><p>至此，我们的安装程序就完成了，但是有一些功能并未提到，有需要的读者可以自行摸索或查阅资料。</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasyButtonX开发全程实录</title>
    <link href="/2023/02/21/EasyButtonX%E5%BC%80%E5%8F%91%E5%85%A8%E7%A8%8B%E5%AE%9E%E5%BD%95/"/>
    <url>/2023/02/21/EasyButtonX%E5%BC%80%E5%8F%91%E5%85%A8%E7%A8%8B%E5%AE%9E%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="EasyButtonX开发全程实录"><a href="#EasyButtonX开发全程实录" class="headerlink" title="EasyButtonX开发全程实录"></a>EasyButtonX开发全程实录</h1><h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><p>在 C++ 的开发中，我们不时会需要一些按钮来帮助我们获取用户的一些特定输入，比如在提示框中，使用按钮可以让用户无需从键盘输入“确定”。为了使用按钮，一般开发会使用 WinApp 的开发。但是 WinApp 的开发极为繁琐，甚至什么也不干，只是启动程序就需要写近 80 行代码。所以我们将开发一个简易的按钮组件“EasyButtonX”。</p><p>为了使用图形界面，我们使用 EasyX 进行开发。<strong>注意！使用 EasyButtonX 之前也需要安装 EasyX！</strong></p><hr><h2 id="0x01-准备工作"><a href="#0x01-准备工作" class="headerlink" title="0x01 准备工作"></a>0x01 准备工作</h2><p>这里，我们需要两个软件：EasyX 和 VisualStudio (不是VScode)，此处说明一下，建议以后使用我们的 EasyButtonX 时也用 VisualStudio 作为 IDE。</p><hr><h3 id="0x01-1-安装-VisualStudio"><a href="#0x01-1-安装-VisualStudio" class="headerlink" title="0x01.1 安装 VisualStudio"></a>0x01.1 安装 VisualStudio</h3><p>首先打开这个网址 <a href="https://visualstudio.microsoft.com/">https://visualstudio.microsoft.com/</a> ，下载 VisualStudio ，请下载 Community 版本 (旁边有一个 VisualStudioCode，不是那个)。</p><p>然后运行刚才下载的 <code>VisualStudioSetup.exe</code> ，等待一系列的配置以后，就会出现一个 VisualStudioInstaller ，我们在“可用”一栏里找到 VisualStudio Community 2022 ，选择安装，并安装所有与 C++ 有关的插件，不过有些大，大约 20 多个 G 吧，可以安装在 D: 盘上，但是 C: 盘仍然需要一些缓存的空间，大约 2G 左右。然后再等一会就好了 (PS: 中国古代历法中，一会是 10800 年)。</p><p>然后，我们就可以通过 VisualStudioInstaller 启动VisualStudio了。</p><hr><h3 id="0x01-2-安装EasyX"><a href="#0x01-2-安装EasyX" class="headerlink" title="0x01.2 安装EasyX"></a>0x01.2 安装EasyX</h3><p>首先打开这个网址 <a href="https://easyx.cn/">https://easyx.cn/</a> ，下载EasyX安装包。</p><p>随后运行刚才下载的文件，点“下一步”，然后把所有可以安装的版本全部安装一遍 (反正也没多大，装了只有好处)。</p><hr><p>至此，准备工作完成。</p><hr><h2 id="0x02-生成项目"><a href="#0x02-生成项目" class="headerlink" title="0x02 生成项目"></a>0x02 生成项目</h2><p>首先，我们打开 VisualStudio (以下简称 VS)</p><p>点击“创建新项目”，选择“空项目”，然后项目名称填“EasyButtonX”，存储位置自定，并勾选“将解决方案和项目放在同一目录中”。</p><p>等待创建完成，我们依次点击 新建 -&gt; 文件，在搜索框里填写“头文件”，选择“头文件(.h)”</p><p>至此，我们的文件创建完毕。</p><hr><h2 id="0x03-基本框架"><a href="#0x03-基本框架" class="headerlink" title="0x03 基本框架"></a>0x03 基本框架</h2><p>由于这是一个按钮组件，我们定义创建按钮的语句为<br><code>Button 按钮名称(x坐标,y坐标,x方向的长度,y方向的长度,文本,文本颜色);</code><br>，以下就是一个例子：<br><code>Button Mybutton(200,200,100,50,(char *)&quot;Hello,World!&quot;);</code></p><p>而这个“Button”实际上是一个类，也就是 <code>class</code> ，而 MyButton 后面的括号里的内容是构造函数。</p><p>所以，我们可以打出以下代码框架：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;easyx.h&gt;</span> <span class="hljs-comment">//使用EasyX的库函数</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span><br>&#123;<span class="hljs-comment">//声明 Button 类</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">//各种信息的存储</span><br>    <span class="hljs-type">int</span> x, y, x_length, y_length;<br><span class="hljs-type">char</span>* text;<br><span class="hljs-type">int</span> textcolor;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">press</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-comment">//按下的外表绘制</span><br><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-comment">//初始状态绘制</span><br><br>&#125;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">bool</span> push = <span class="hljs-literal">false</span>; <span class="hljs-comment">//表示是否按下</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">testpress</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-comment">//检测按下情况</span><br><br>&#125;<br><span class="hljs-built_in">Button</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> x_length, <span class="hljs-type">int</span> y_length, <span class="hljs-type">char</span>* text, <span class="hljs-type">int</span> textcolor)<br>&#123;<span class="hljs-comment">//构造函数</span><br>        <span class="hljs-comment">//全部赋值</span><br><span class="hljs-keyword">this</span>-&gt;x = x;<br><span class="hljs-keyword">this</span>-&gt;y = y;<br><span class="hljs-keyword">this</span>-&gt;x_length = x_length;<br><span class="hljs-keyword">this</span>-&gt;y_length = y_length;<br><span class="hljs-keyword">this</span>-&gt;text = text;<br><span class="hljs-keyword">this</span>-&gt;textcolor = textcolor;<br>        <span class="hljs-comment">//绘制初始状态</span><br><span class="hljs-built_in">init</span>();<br>&#125;<br>~<span class="hljs-built_in">Button</span>() &#123;&#125; <span class="hljs-comment">//析构函数</span><br>&#125;;<span class="hljs-comment">//不要忘了分号</span><br></code></pre></td></tr></table></figure><hr><h2 id="0x04-功能实现"><a href="#0x04-功能实现" class="headerlink" title="0x04 功能实现"></a>0x04 功能实现</h2><p>接下来，我们进行每一项功能的实现。</p><hr><h3 id="0x04-1-init-函数实现"><a href="#0x04-1-init-函数实现" class="headerlink" title="0x04.1 init() 函数实现"></a>0x04.1 init() 函数实现</h3><p>我们需要绘制一个矩形，表示按钮的边框，在按钮边框的上边和右边再加深阴影，并打印文本。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">setlinestyle</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<span class="hljs-comment">//设置粗细为4，线条样式为 0 (普通线条)</span><br>    <span class="hljs-comment">//外边框</span><br><span class="hljs-built_in">setlinecolor</span>(<span class="hljs-number">0x8d8d8d</span>);<br><span class="hljs-built_in">rectangle</span>(x, y, x + x_length, y + y_length);<br>    <span class="hljs-comment">//两条阴影</span><br><span class="hljs-built_in">setlinecolor</span>(<span class="hljs-number">0xbababa</span>);<br><span class="hljs-built_in">line</span>(x + x_length - <span class="hljs-number">3</span>, y + <span class="hljs-number">3</span>, x + x_length - <span class="hljs-number">3</span>, y + y_length - <span class="hljs-number">3</span>);<br><span class="hljs-built_in">line</span>(x + <span class="hljs-number">3</span>, y + <span class="hljs-number">3</span>, x + x_length - <span class="hljs-number">3</span>, y + <span class="hljs-number">3</span>);<br>    <span class="hljs-comment">//打印文本</span><br><span class="hljs-built_in">settextcolor</span>(textcolor);<br><span class="hljs-built_in">outtextxy</span>(x + <span class="hljs-number">3</span>, y + (y_length / <span class="hljs-number">2</span>) - <span class="hljs-number">7</span>, text);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="0x04-2-press-函数实现"><a href="#0x04-2-press-函数实现" class="headerlink" title="0x04.2 press() 函数实现"></a>0x04.2 press() 函数实现</h3><p>其实代码和 init() 函数差不多，只是颜色不同，没有文字修改而已。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">press</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">setlinestyle</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<span class="hljs-comment">//设置粗细为4，线条样式为 0 (普通线条)</span><br>    <span class="hljs-comment">//外边框</span><br><span class="hljs-built_in">setlinecolor</span>(<span class="hljs-number">0xbababa</span>);<br><span class="hljs-built_in">rectangle</span>(x, y, x + x_length, y + y_length);<br>    <span class="hljs-comment">//两条阴影</span><br><span class="hljs-built_in">setlinecolor</span>(<span class="hljs-number">0x8d8d8d</span>);<br><span class="hljs-built_in">line</span>(x + x_length - <span class="hljs-number">3</span>, y + <span class="hljs-number">3</span>, x + x_length - <span class="hljs-number">3</span>, y + y_length - <span class="hljs-number">3</span>);<br><span class="hljs-built_in">line</span>(x + <span class="hljs-number">3</span>, y + <span class="hljs-number">3</span>, x + x_length - <span class="hljs-number">3</span>, y + <span class="hljs-number">3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="0x04-3-testpress-函数实现"><a href="#0x04-3-testpress-函数实现" class="headerlink" title="0x04.3 testpress() 函数实现"></a>0x04.3 testpress() 函数实现</h3><p>这个函数我们需要首先获取一个鼠标的动作，然后再判断是否是左键、是否在按钮区域中点击等，如果是，那么就修改按钮外观和 push 变量的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">testpress</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">MouseHit</span>())<span class="hljs-comment">//判断是否有关于鼠标的信息</span><br>&#123;<br>MOUSEMSG msg = <span class="hljs-built_in">GetMouseMsg</span>();<span class="hljs-comment">//获取鼠标信息</span><br><span class="hljs-keyword">if</span> (msg.uMsg == WM_LBUTTONDOWN)<span class="hljs-comment">//如果是左键</span><br>&#123;<br><span class="hljs-keyword">if</span> (msg.x &gt; x &amp;&amp; msg.x &lt; x + x_length &amp;&amp; msg.y&gt;y &amp;&amp; msg.y &lt; y + y_length)<span class="hljs-comment">//如果在按钮里点击的</span><br>&#123;<br>                <span class="hljs-comment">//修改值</span><br><span class="hljs-built_in">press</span>();<br>push = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">while</span> (msg.uMsg != WM_LBUTTONUP)<span class="hljs-comment">//等待鼠标抬起</span><br>&#123;<br>msg = <span class="hljs-built_in">GetMouseMsg</span>();<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (push == <span class="hljs-literal">true</span>)<span class="hljs-built_in">init</span>(), push = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (push == <span class="hljs-literal">true</span>)<span class="hljs-built_in">init</span>(), push = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (push == <span class="hljs-literal">true</span>)<span class="hljs-built_in">init</span>(), push = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>不过我们发现，这样写会报错，原因是 <code>MouseHit()</code> 等函数未定义！</p><p>这是为什么呢？因为这些函数其实 <code>easyx.h</code> 并没有包含这个函数，我们需要导入一些额外的头文件。</p><p>这里我们导入的 <code>windows.h</code> 在 linux 环境下并不能使用，不过不用担心，easyx 本身也只能在 windows 下使用，所以并不影响我们的开发。</p><p>在程序的最前面添加以下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;easyx.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;graphics.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>这样就好啦！</p><hr><h2 id="0x05-完成啦！"><a href="#0x05-完成啦！" class="headerlink" title="0x05 完成啦！"></a>0x05 完成啦！</h2><p>至此，我们的 EasyButtonX 就开发到这里啦，各位读者也可以自行更新出其它功能呢！</p><p>~ 完结散花 ヾ(◍°∇°◍)ﾉﾞ ~ </p><hr><h2 id="附录-完整代码"><a href="#附录-完整代码" class="headerlink" title="附录 完整代码"></a>附录 完整代码</h2><p>如果自己写不出来的话，可以看看这个代码，或者去看看 <a href="https://github.com/DijkstraPhoenix/EasyButtonX">项目地址</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;easyx.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;graphics.h&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Button</span><br>&#123;<br><span class="hljs-keyword">private</span>:<br><span class="hljs-type">int</span> x, y, x_length, y_length;<span class="hljs-comment">//Start x,start y,x &#x27;s length,y &#x27;s length</span><br><span class="hljs-type">char</span>* text;<span class="hljs-comment">//Button &#x27;s text</span><br><span class="hljs-type">int</span> textcolor;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">press</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-comment">//This function is draw this Button</span><br><span class="hljs-built_in">setlinestyle</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br><span class="hljs-built_in">setlinecolor</span>(<span class="hljs-number">0xbababa</span>);<br><span class="hljs-built_in">rectangle</span>(x, y, x + x_length, y + y_length);<br><span class="hljs-built_in">setlinecolor</span>(<span class="hljs-number">0x8d8d8d</span>);<br><span class="hljs-built_in">line</span>(x + x_length - <span class="hljs-number">3</span>, y + <span class="hljs-number">3</span>, x + x_length - <span class="hljs-number">3</span>, y + y_length - <span class="hljs-number">3</span>);<br><span class="hljs-built_in">line</span>(x + <span class="hljs-number">3</span>, y + <span class="hljs-number">3</span>, x + x_length - <span class="hljs-number">3</span>, y + <span class="hljs-number">3</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">setlinestyle</span>(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br><span class="hljs-built_in">setlinecolor</span>(<span class="hljs-number">0x8d8d8d</span>);<br><span class="hljs-built_in">rectangle</span>(x, y, x + x_length, y + y_length);<br><span class="hljs-built_in">setlinecolor</span>(<span class="hljs-number">0xbababa</span>);<br><span class="hljs-built_in">line</span>(x + x_length - <span class="hljs-number">3</span>, y + <span class="hljs-number">3</span>, x + x_length - <span class="hljs-number">3</span>, y + y_length - <span class="hljs-number">3</span>);<br><span class="hljs-built_in">line</span>(x + <span class="hljs-number">3</span>, y + <span class="hljs-number">3</span>, x + x_length - <span class="hljs-number">3</span>, y + <span class="hljs-number">3</span>);<br><span class="hljs-built_in">settextcolor</span>(textcolor);<br><span class="hljs-built_in">outtextxy</span>(x + <span class="hljs-number">3</span>, y + (y_length / <span class="hljs-number">2</span>) - <span class="hljs-number">7</span>, text);<br>&#125;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-type">bool</span> push = <span class="hljs-literal">false</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">testpress</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">MouseHit</span>())<br>&#123;<br>MOUSEMSG msg = <span class="hljs-built_in">GetMouseMsg</span>();<br><span class="hljs-keyword">if</span> (msg.uMsg == WM_LBUTTONDOWN)<br>&#123;<br><span class="hljs-keyword">if</span> (msg.x &gt; x &amp;&amp; msg.x &lt; x + x_length &amp;&amp; msg.y&gt;y &amp;&amp; msg.y &lt; y + y_length)<br>&#123;<br><span class="hljs-built_in">press</span>();<br>push = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">while</span> (msg.uMsg != WM_LBUTTONUP)<br>&#123;<br>msg = <span class="hljs-built_in">GetMouseMsg</span>();<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (push == <span class="hljs-literal">true</span>)<span class="hljs-built_in">init</span>(), push = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (push == <span class="hljs-literal">true</span>)<span class="hljs-built_in">init</span>(), push = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (push == <span class="hljs-literal">true</span>)<span class="hljs-built_in">init</span>(), push = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-built_in">Button</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> x_length, <span class="hljs-type">int</span> y_length, <span class="hljs-type">char</span>* text, <span class="hljs-type">int</span> textcolor)<br>&#123;<span class="hljs-comment">//This function is init this button</span><br><span class="hljs-keyword">this</span>-&gt;x = x;<br><span class="hljs-keyword">this</span>-&gt;y = y;<br><span class="hljs-keyword">this</span>-&gt;x_length = x_length;<br><span class="hljs-keyword">this</span>-&gt;y_length = y_length;<br><span class="hljs-keyword">this</span>-&gt;text = text;<br><span class="hljs-keyword">this</span>-&gt;textcolor = textcolor;<br><span class="hljs-built_in">init</span>();<br>&#125;<br>~<span class="hljs-built_in">Button</span>() &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>组件</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Welcome my blog!</title>
    <link href="/2023/01/08/Welcome-my-blog/"/>
    <url>/2023/01/08/Welcome-my-blog/</url>
    
    <content type="html"><![CDATA[<h4 id="Welcome-DijkstraPhoenix-‘s-blog"><a href="#Welcome-DijkstraPhoenix-‘s-blog" class="headerlink" title="Welcome DijkstraPhoenix ‘s blog!"></a>Welcome DijkstraPhoenix ‘s blog!</h4><h4 id="This-is-my-first-article"><a href="#This-is-my-first-article" class="headerlink" title="This is my first article"></a>This is my first article</h4><h4 id="欢迎来到DijkstraPhoenix的博客！"><a href="#欢迎来到DijkstraPhoenix的博客！" class="headerlink" title="欢迎来到DijkstraPhoenix的博客！"></a>欢迎来到DijkstraPhoenix的博客！</h4><h4 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h4><p><a href="https://github.com/DijkstraPhoenix"><img src="https://avatars.githubusercontent.com/u/109066118?s=96&v=4" alt="DijkstraPhoenix"></a></p>]]></content>
    
    
    
    <tags>
      
      <tag>welcome</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
